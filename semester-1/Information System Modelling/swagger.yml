openapi: 3.0.1
info:
  title: Surfing/kiting spot
  description: Restful API for management of Surfing/kitting spot.
  version: 1.0.0
servers:
- url: https://localhost:3000/api
tags:
  - name: users
    description: Endpoints related with tenants.
  - name: relations
    description: Endpoints related with contacts and relations of the tenant.
  - name: stocks
    description: Endpoints related with stocks of the tenant.
  - name: products
    description: Endpoints related with products of the tenant.
  - name: orders
    description: Endpoints related with orders of the tenant.
paths:
  /users:
    get:
      parameters:
        - in: query
          name: email
          schema:
            type: string
            description: Email address
        - in: query
          name: fullName
          schema:
            type: string
            description: Full name
        - in: query
          name: companyName
          schema:
            type: string
            description: Company name
        - in: query
          name: employee_count
          schema:
            type: number
            description: Count of employees
      description: This endpoint returns all Users from the database.
      operationId: getUsers
      tags: 
        - users
      responses:
        200:
          description: Returns list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetUser'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      description: Creates a new user. Duplicates are not allowed
      operationId: addUser
      tags: 
        - users
      requestBody:
        description: Add user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUser'
        required: true
      responses:
        200:
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /users/{id}:
    get:
      description: This endpoints are related with the Users model of the application.
      operationId: getUser
      tags:
        - users
      parameters:
      - name: id
        in: path
        description: ID of user to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUser'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      description: Update user
      operationId: updateUser
      tags:
        - users
      parameters:
      - name: id
        in: path
        description: ID of user to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      tags:
        - users
      parameters:
      - name: id
        in: path
        description: ID of user to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /relations:
    get:
      parameters:
        - in: query
          name: type
          schema:
            type: number
            description: Type of relation. 1 for Person, 2 for Legal Entity.
        - in: query
          name: name
          schema:
            type: string
            description: Name of the relation
      description: This endpoint returns all relations from the database.
      operationId: getRelations
      tags: 
        - relations
      responses:
        200:
          description: Returns list of relations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetRelation'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      description: Creates a new relation. Duplicates are not allowed
      operationId: addRelation
      tags: 
        - relations
      requestBody:
        description: Add relation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relation'
        required: true
      responses:
        200:
          description: relation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /relations/{id}:
    get:
      description: This endpoints are related with the relations model of the application.
      operationId: getRelation
      tags:
        - relations
      parameters:
      - name: id
        in: path
        description: ID of relation to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: relation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRelation'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      description: Update relation
      operationId: updateRelation
      tags:
        - relations
      parameters:
      - name: id
        in: path
        description: ID of relation to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: relation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      description: deletes a single relation based on the ID supplied
      operationId: deleteRelation
      tags:
        - relations
      parameters:
      - name: id
        in: path
        description: ID of relation to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: relation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /stocks:
    get:
      parameters:
        - in: query
          name: responsiblePerson
          schema:
            type: string
            description: Name of responsible person
        - in: query
          name: name
          schema:
            type: string
            description: Name of the stock
      description: This endpoint returns all stocks from the database.
      operationId: getStocks
      tags: 
        - stocks
      responses:
        200:
          description: Returns list of stocks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetStock'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      description: Creates a new stock. Duplicates are not allowed
      operationId: addStock
      tags: 
        - stocks
      requestBody:
        description: Add stock
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
        required: true
      responses:
        200:
          description: stock response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /stocks/{id}:
    get:
      description: This endpoints are related with the stocks model of the application.
      operationId: getStock
      tags:
        - stocks
      parameters:
      - name: id
        in: path
        description: ID of stock to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: stock response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStock'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      description: Update stock
      operationId: updateStock
      tags:
        - stocks
      parameters:
      - name: id
        in: path
        description: ID of stock to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: stock response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      description: deletes a single stock based on the ID supplied
      operationId: deleteStock
      tags:
        - stocks
      parameters:
      - name: id
        in: path
        description: ID of stock to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: stock response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /products:
    get:
      parameters:
        - in: query
          name: price
          schema:
            type: number
            description: Price of the product
        - in: query
          name: unitOfMeasurement
          schema:
            type: string
            description: Measurement method of the product
        - in: query
          name: name
          schema:
            type: string
            description: Name of the product
      description: This endpoint returns all products from the database.
      operationId: getProducts
      tags: 
        - products
      responses:
        200:
          description: Returns list of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetProduct'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      description: Creates a new product. Duplicates are not allowed
      operationId: addProduct
      tags: 
        - products
      requestBody:
        description: Add product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: product response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /products/{id}:
    get:
      description: This endpoints are related with the products model of the application.
      operationId: getProduct
      tags:
        - products
      parameters:
      - name: id
        in: path
        description: ID of product to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: product response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProduct'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      description: Update product
      operationId: updateProduct
      tags:
        - products
      parameters:
      - name: id
        in: path
        description: ID of product to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: product response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      description: deletes a single product based on the ID supplied
      operationId: deleteProduct
      tags:
        - products
      parameters:
      - name: id
        in: path
        description: ID of product to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: product response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /orders:
    get:
      parameters:
        - in: query
          name: status
          schema:
            type: number
            description: Status of the oder
        - in: query
          name: partnerName
          schema:
            type: string
            description: Partner name
        - in: query
          name: name
          schema:
            type: string
            description: Name of the order
      description: This endpoint returns all orders from the database.
      operationId: getOrders
      tags: 
        - orders
      responses:
        200:
          description: Returns list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetOrder'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      description: Creates a new order. Duplicates are not allowed
      operationId: addOrder
      tags: 
        - orders
      requestBody:
        description: Add order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: order response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /orders/{id}:
    get:
      description: This endpoints are related with the orders model of the application.
      operationId: getOrder
      tags:
        - orders
      parameters:
      - name: id
        in: path
        description: ID of order to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: order response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrder'
        default:
          description: This is default error response for the endpoint. For different error codes, different error messages will be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      description: Update order
      operationId: updateOrder
      tags:
        - orders
      parameters:
      - name: id
        in: path
        description: ID of order to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: order response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      description: deletes a single order based on the ID supplied
      operationId: deleteOrder
      tags:
        - orders
      parameters:
      - name: id
        in: path
        description: ID of order to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: order response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    Item:
      required:
      - id
      type: object
      properties:
        id:
          type: number
          description: Id of new created item
      example:
        id: 1
    NewItem:
      allOf:
      - $ref: '#/components/schemas/Item'
      required:
      - createdAt
      type: object
      properties:
        id:
         type: number
        createdAt:
          type: string
          description: Created date
      example:
        id: 1
        date: "01.01.2022 00:00"
    User:
      required:
      - email
      - fullName
      - companyName
      - employee_count
      - description
      type: object
      properties:
        email:
          type: string
          description: Email of the user
        fullName:
          type: string
          description: Full name of the user
        companyName:
          type: string
          description: Company name of the user
        employee_count:
          type: number
          description: Employee count of the company
        description:
          type: string
      example:
        email: 270010@student.pwr.edu.pl
        fullName: Tural Hajiyev
        companyName: Yachta LLC
        employee_count: 1
        description: Example User
    AddUser:
      allOf:
      - $ref: '#/components/schemas/User'
      type: object
      properties:
        password:
          type: string
    GetUser:
      allOf:
      - $ref: '#/components/schemas/NewItem'
      - $ref: '#/components/schemas/User'
    Relation:
      required:
        - type
        - name
        - position
        - company
        - phoneNumber
        - email
        - website
        - voen
        - address
        - status
        - manager
        - description
      type: object
      properties:
        type:
          type: number
          description: Type of relation. 1 for Person, 2 for Legal entity.
        name:
          type: string
        position:
          type: string
        company:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        website:
          type: string
        voen:
          type: string
        address:
          type: string
        status:
          type: number
          description: Status of the relation. 1 for Active, 2 for Deactive
        manager:
          type: string
        description:
          type: string
          description: Information about the relation.
      example:
        type: 1
        name: Tural Hajiyev
        position: Manager
        company: Yachta LLC
        phoneNumber: +48515513743
        email: 270010@pwr.edu.pl
        voen: null
        address: null
        status: Active
        manager: null
        description: Example Relation
    GetRelation:
      allOf:
      - $ref: '#/components/schemas/Relation'
      - $ref: '#/components/schemas/NewItem'
    Stock:
      required:
      - name
      - location
      - size
      - responsiblePerson
      - description
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        size:
          type: number
        responsiblePerson:
          type: string
        description:
          type: string
      example:
        name: Stock N1
        location: Wroclaw, Poland
        size: 200
        responsiblePerson: Tural Hajiyev
        description: It's example stock
    GetStock:
      allOf:
      - $ref: '#/components/schemas/Stock'
      - $ref: '#/components/schemas/NewItem'
    Product:
      required:
      - name
      - barcode
      - price
      - currency
      - catalogName
      - unitOfMeasurement
      - description
      type: object
      properties:
        name:
          type: string
        barcode:
          type: string
        price:
          type: number
        currency:
          type: string
        catalogName:
          type: string
        unitOfMeasurement:
          type: string
        description:
          type: string
      example:
        name: Example product
        barcode: 000001EXAMPLE00
        price: 100
        currency: PLN
        catalogName: Furniture
        unitOfMeasurement: number
        description: Example product
    GetProduct:
      allOf:
        - $ref: '#/components/schemas/Product'
        - $ref: '#/components/schemas/NewItem'
    Order:
      required:
        - partnerName
        - stage,
        - status
        - deliveryDate
        - direction
        - items
      type: object
      properties:
        partnerName: 
          type: string
        stage:
          type: number
        status:
          type: number
        type:
          type: number
          description: Type of order. 1 for purchase, 2 for rent
        deliveryDate:
          type: string
          description: Direction of order. If seller is the tenant 1, else 2
        direction:
          type: number
        items:
          type: array
          items:
            properties:
              productId:
                type: number
              quantity:
                type: number
              price:
                type: number
              currency:
                type: string
      example:
        partnerName: Second company LLC
        stage: In delivery
        status: Active
        type: 1
        deliveryDate: 01.01.2022
        direction: 1
        items: [
          {
            productId: 1,
            quantity: 5,
            price: 200,
            currency: PLN
          }]
    GetOrder:
      allOf:
      - $ref: '#/components/schemas/Order'
      - $ref: '#/components/schemas/NewItem'
    ErrorModel:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string